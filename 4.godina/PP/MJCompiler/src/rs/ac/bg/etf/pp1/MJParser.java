
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Feb 04 21:48:15 CET 2024
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

/** CUP v0.10k generated parser.
  * @version Sun Feb 04 21:48:15 CET 2024
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\241\000\002\047\011\000\002\002\004\000\002\046" +
    "\003\000\002\051\012\000\002\050\003\000\002\003\002" +
    "\000\002\003\004\000\002\074\006\000\002\073\003\000" +
    "\002\005\005\000\002\005\007\000\002\072\003\000\002" +
    "\071\003\000\002\071\003\000\002\071\003\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\002" +
    "\000\002\103\011\000\002\104\003\000\002\105\005\000" +
    "\002\105\003\000\002\105\004\000\002\015\005\000\002" +
    "\015\003\000\002\015\002\000\002\016\002\000\002\016" +
    "\004\000\002\106\004\000\002\110\003\000\002\017\003" +
    "\000\002\017\002\000\002\006\002\000\002\006\005\000" +
    "\002\007\005\000\002\007\002\000\002\107\006\000\002" +
    "\020\003\000\002\021\003\000\002\014\003\000\002\014" +
    "\004\000\002\010\002\000\002\010\004\000\002\075\007" +
    "\000\002\012\003\000\002\011\007\000\002\011\004\000" +
    "\002\076\003\000\002\077\003\000\002\077\003\000\002" +
    "\037\003\000\002\037\002\000\002\040\003\000\002\040" +
    "\005\000\002\100\006\000\002\100\004\000\002\101\003" +
    "\000\002\102\003\000\002\111\004\000\002\111\004\000" +
    "\002\111\005\000\002\111\007\000\002\111\004\000\002" +
    "\111\004\000\002\111\005\000\002\111\004\000\002\111" +
    "\007\000\002\111\007\000\002\111\011\000\002\111\005" +
    "\000\002\111\013\000\002\030\003\000\002\031\003\000" +
    "\002\027\003\000\002\112\005\000\002\112\004\000\002" +
    "\022\002\000\002\022\003\000\002\023\002\000\002\023" +
    "\003\000\002\113\002\000\002\113\003\000\002\025\003" +
    "\000\002\025\005\000\002\026\002\000\002\026\004\000" +
    "\002\114\005\000\002\114\006\000\002\114\004\000\002" +
    "\114\004\000\002\114\011\000\002\034\003\000\002\115" +
    "\003\000\002\032\002\000\002\032\005\000\002\033\003" +
    "\000\002\033\002\000\002\013\004\000\002\013\002\000" +
    "\002\065\006\000\002\065\003\000\002\067\003\000\002" +
    "\045\004\000\002\045\004\000\002\045\004\000\002\064" +
    "\002\000\002\064\005\000\002\066\005\000\002\066\003" +
    "\000\002\124\003\000\002\124\005\000\002\125\003\000" +
    "\002\125\005\000\002\121\003\000\002\121\005\000\002" +
    "\122\003\000\002\123\003\000\002\035\002\000\002\035" +
    "\003\000\002\036\003\000\002\036\005\000\002\126\003" +
    "\000\002\070\006\000\002\070\003\000\002\061\003\000" +
    "\002\062\003\000\002\120\004\000\002\120\003\000\002" +
    "\120\005\000\002\116\003\000\002\116\005\000\002\117" +
    "\006\000\002\117\003\000\002\117\003\000\002\117\003" +
    "\000\002\117\003\000\002\117\007\000\002\117\007\000" +
    "\002\117\005\000\002\060\003\000\002\057\003\000\002" +
    "\054\006\000\002\054\003\000\002\054\006\000\002\054" +
    "\005\000\002\056\003\000\002\052\003\000\002\053\003" +
    "\000\002\041\003\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\043\003\000\002\043\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010f\000\004\004\005\001\002\000\004\002\u0111\001" +
    "\002\000\004\061\007\001\002\000\016\003\ufffc\006\ufffc" +
    "\010\ufffc\023\ufffc\051\ufffc\061\ufffc\001\002\000\016\003" +
    "\uffff\006\uffff\010\uffff\023\uffff\051\uffff\061\uffff\001\002" +
    "\000\016\003\uffef\006\uffef\010\uffef\023\011\051\uffef\061" +
    "\uffef\001\002\000\004\061\u0109\001\002\000\016\003\ufffb" +
    "\006\ufffb\010\ufffb\023\ufffb\051\ufffb\061\ufffb\001\002\000" +
    "\014\003\024\006\027\010\026\051\016\061\017\001\002" +
    "\000\020\003\uff9c\006\uff9c\010\uff9c\022\uff9c\051\uff9c\052" +
    "\uff9c\061\uff9c\001\002\000\004\061\uff9b\001\002\000\012" +
    "\003\uffd7\016\uffd7\052\uffd7\061\uffd7\001\002\000\014\045" +
    "\uff83\051\uff84\053\uff84\055\uff84\061\uff84\001\002\000\004" +
    "\061\uff97\001\002\000\014\003\ufff2\006\ufff2\010\ufff2\051" +
    "\ufff2\061\ufff2\001\002\000\014\003\ufff0\006\ufff0\010\ufff0" +
    "\051\ufff0\061\ufff0\001\002\000\012\051\uff85\053\uff85\055" +
    "\uff85\061\uff85\001\002\000\010\044\377\046\375\051\376" +
    "\001\002\000\014\003\ufff1\006\ufff1\010\ufff1\051\ufff1\061" +
    "\ufff1\001\002\000\004\061\017\001\002\000\004\061\036" +
    "\001\002\000\004\045\031\001\002\000\004\045\032\001" +
    "\002\000\004\061\034\001\002\000\012\051\uff86\053\uff86" +
    "\055\uff86\061\uff86\001\002\000\012\051\uff84\053\uff84\055" +
    "\uff84\061\uff84\001\002\000\010\003\041\017\040\051\037" +
    "\001\002\000\010\003\uffed\017\uffed\051\uffed\001\002\000" +
    "\014\003\uffeb\022\uffeb\051\uffeb\052\uffeb\061\uffeb\001\002" +
    "\000\004\061\017\001\002\000\004\051\353\001\002\000" +
    "\014\003\uffe7\022\045\051\uffe7\052\uffe7\061\uffe7\001\002" +
    "\000\014\003\uffe8\022\045\051\uffe8\052\uffe8\061\uffe8\001" +
    "\002\000\012\003\uff9e\051\uff9e\052\uff9e\061\uff9e\001\002" +
    "\000\010\003\uffe3\051\uffe3\061\uffe3\001\002\000\010\003" +
    "\024\051\057\061\017\001\002\000\014\003\uffe6\022\uffe6" +
    "\051\uffe6\052\uffe6\061\uffe6\001\002\000\014\003\uffd9\022" +
    "\uffd9\051\uffd9\052\uffd9\061\uffd9\001\002\000\014\003\uffe1" +
    "\022\045\051\uffe1\052\uffe1\061\uffe1\001\002\000\012\003" +
    "\uffe9\051\uffe9\052\uffe9\061\uffe9\001\002\000\014\003\uffe2" +
    "\022\045\051\uffe2\052\uffe2\061\uffe2\001\002\000\014\003" +
    "\uffe5\022\uffe5\051\uffe5\052\uffe5\061\uffe5\001\002\000\004" +
    "\051\057\001\002\000\014\003\uffd8\022\uffd8\051\uffd8\052" +
    "\uffd8\061\uffd8\001\002\000\032\003\uffdb\005\uffdb\011\uffdb" +
    "\013\uffdb\014\uffdb\015\uffdb\020\uffdb\021\uffdb\051\uffdb\052" +
    "\uffdb\053\uffdb\061\uffdb\001\002\000\032\003\uffac\005\uffac" +
    "\011\uffac\013\uffac\014\uffac\015\uffac\020\uffac\021\uffac\051" +
    "\uffac\052\uffac\053\uffac\061\uffac\001\002\000\032\003\103" +
    "\005\077\011\071\013\102\014\063\015\070\020\064\021" +
    "\106\051\073\052\067\053\072\061\065\001\002\000\016" +
    "\031\304\032\305\033\306\047\177\053\176\055\uff74\001" +
    "\002\000\004\055\277\001\002\000\004\044\276\001\002" +
    "\000\062\024\uff6d\025\uff6d\026\uff6d\027\uff6d\030\uff6d\031" +
    "\uff6d\032\uff6d\033\uff6d\034\uff6d\035\uff6d\036\uff6d\037\uff6d" +
    "\040\uff6d\041\uff6d\042\uff6d\043\uff6d\044\uff6d\045\uff6e\046" +
    "\uff6d\047\uff6d\053\uff6d\054\uff6d\055\uff6d\056\uff6d\001\002" +
    "\000\004\044\275\001\002\000\014\003\uffda\022\uffda\051" +
    "\uffda\052\uffda\061\uffda\001\002\000\022\012\121\025\117" +
    "\044\273\055\133\057\125\060\131\061\065\062\124\001" +
    "\002\000\006\003\uffb7\055\uffb7\001\002\000\010\026\uffa5" +
    "\046\uffa5\061\uffa5\001\002\000\032\003\uffac\005\uffac\011" +
    "\uffac\013\uffac\014\uffac\015\uffac\020\uffac\021\uffac\051\uffac" +
    "\052\uffac\053\uffac\061\uffac\001\002\000\014\003\uffdc\022" +
    "\uffdc\051\uffdc\052\uffdc\061\uffdc\001\002\000\004\055\265" +
    "\001\002\000\060\024\uff72\025\uff72\026\uff72\027\uff72\030" +
    "\uff72\031\uff72\032\uff72\033\uff72\034\uff72\035\uff72\036\uff72" +
    "\037\uff72\040\uff72\041\uff72\042\uff72\043\uff72\044\uff72\046" +
    "\uff72\047\uff72\053\uff72\054\uff72\055\uff72\056\uff72\001\002" +
    "\000\004\044\264\001\002\000\004\045\260\001\002\000" +
    "\010\026\uffa3\046\uffa3\061\uffa3\001\002\000\004\055\236" +
    "\001\002\000\004\044\235\001\002\000\006\003\215\055" +
    "\217\001\002\000\032\003\uffab\005\uffab\011\uffab\013\uffab" +
    "\014\uffab\015\uffab\020\uffab\021\uffab\051\uffab\052\uffab\053" +
    "\uffab\061\uffab\001\002\000\004\055\uffb8\001\002\000\004" +
    "\055\110\001\002\000\010\044\uffb4\053\072\061\065\001" +
    "\002\000\004\044\116\001\002\000\010\044\uffae\046\uffae" +
    "\056\uffae\001\002\000\006\044\uffb3\046\114\001\002\000" +
    "\006\053\072\061\065\001\002\000\010\044\uffad\046\uffad" +
    "\056\uffad\001\002\000\022\012\121\025\117\044\uffb0\055" +
    "\133\057\125\060\131\061\065\062\124\001\002\000\016" +
    "\012\121\055\133\057\125\060\131\061\065\062\124\001" +
    "\002\000\032\024\143\025\144\034\uff8d\035\uff8d\036\uff8d" +
    "\037\uff8d\040\uff8d\041\uff8d\042\uff8f\043\uff8f\044\uff8f\056" +
    "\uff8f\001\002\000\004\061\017\001\002\000\052\024\uff7c" +
    "\025\uff7c\026\uff7c\027\uff7c\030\uff7c\034\uff7c\035\uff7c\036" +
    "\uff7c\037\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c\044\uff7c" +
    "\046\uff7c\047\177\053\176\054\uff7c\055\uff74\056\uff7c\001" +
    "\002\000\004\044\171\001\002\000\044\024\uff7b\025\uff7b" +
    "\026\uff7b\027\uff7b\030\uff7b\034\uff7b\035\uff7b\036\uff7b\037" +
    "\uff7b\040\uff7b\041\uff7b\042\uff7b\043\uff7b\044\uff7b\046\uff7b" +
    "\054\uff7b\056\uff7b\001\002\000\044\024\uff79\025\uff79\026" +
    "\uff79\027\uff79\030\uff79\034\uff79\035\uff79\036\uff79\037\uff79" +
    "\040\uff79\041\uff79\042\uff79\043\uff79\044\uff79\046\uff79\054" +
    "\uff79\056\uff79\001\002\000\004\044\uffaf\001\002\000\016" +
    "\034\161\035\165\036\163\037\162\040\160\041\164\001" +
    "\002\000\044\024\uff81\025\uff81\026\150\027\151\030\147" +
    "\034\uff81\035\uff81\036\uff81\037\uff81\040\uff81\041\uff81\042" +
    "\uff81\043\uff81\044\uff81\046\uff81\054\uff81\056\uff81\001\002" +
    "\000\044\024\uff7a\025\uff7a\026\uff7a\027\uff7a\030\uff7a\034" +
    "\uff7a\035\uff7a\036\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a" +
    "\043\uff7a\044\uff7a\046\uff7a\054\uff7a\056\uff7a\001\002\000" +
    "\044\024\uff7f\025\uff7f\026\uff7f\027\uff7f\030\uff7f\034\uff7f" +
    "\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f\043" +
    "\uff7f\044\uff7f\046\uff7f\054\uff7f\056\uff7f\001\002\000\020" +
    "\012\121\025\117\055\133\057\125\060\131\061\065\062" +
    "\124\001\002\000\004\055\135\001\002\000\022\012\121" +
    "\025\117\055\133\056\uff8b\057\125\060\131\061\065\062" +
    "\124\001\002\000\006\046\154\056\uff8a\001\002\000\012" +
    "\024\143\025\144\046\uff87\056\uff87\001\002\000\004\056" +
    "\142\001\002\000\006\046\uff89\056\uff89\001\002\000\044" +
    "\024\uff7d\025\uff7d\026\uff7d\027\uff7d\030\uff7d\034\uff7d\035" +
    "\uff7d\036\uff7d\037\uff7d\040\uff7d\041\uff7d\042\uff7d\043\uff7d" +
    "\044\uff7d\046\uff7d\054\uff7d\056\uff7d\001\002\000\016\012" +
    "\uff65\055\uff65\057\uff65\060\uff65\061\uff65\062\uff65\001\002" +
    "\000\016\012\uff64\055\uff64\057\uff64\060\uff64\061\uff64\062" +
    "\uff64\001\002\000\016\012\121\055\133\057\125\060\131" +
    "\061\065\062\124\001\002\000\044\024\uff80\025\uff80\026" +
    "\150\027\151\030\147\034\uff80\035\uff80\036\uff80\037\uff80" +
    "\040\uff80\041\uff80\042\uff80\043\uff80\044\uff80\046\uff80\054" +
    "\uff80\056\uff80\001\002\000\016\012\uff61\055\uff61\057\uff61" +
    "\060\uff61\061\uff61\062\uff61\001\002\000\016\012\uff63\055" +
    "\uff63\057\uff63\060\uff63\061\uff63\062\uff63\001\002\000\016" +
    "\012\uff62\055\uff62\057\uff62\060\uff62\061\uff62\062\uff62\001" +
    "\002\000\016\012\121\055\133\057\125\060\131\061\065" +
    "\062\124\001\002\000\044\024\uff7e\025\uff7e\026\uff7e\027" +
    "\uff7e\030\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e\040\uff7e" +
    "\041\uff7e\042\uff7e\043\uff7e\044\uff7e\046\uff7e\054\uff7e\056" +
    "\uff7e\001\002\000\020\012\121\025\117\055\133\057\125" +
    "\060\131\061\065\062\124\001\002\000\006\046\uff88\056" +
    "\uff88\001\002\000\010\024\143\025\144\056\157\001\002" +
    "\000\044\024\uff76\025\uff76\026\uff76\027\uff76\030\uff76\034" +
    "\uff76\035\uff76\036\uff76\037\uff76\040\uff76\041\uff76\042\uff76" +
    "\043\uff76\044\uff76\046\uff76\054\uff76\056\uff76\001\002\000" +
    "\020\012\uff67\025\uff67\055\uff67\057\uff67\060\uff67\061\uff67" +
    "\062\uff67\001\002\000\020\012\uff6b\025\uff6b\055\uff6b\057" +
    "\uff6b\060\uff6b\061\uff6b\062\uff6b\001\002\000\020\012\uff68" +
    "\025\uff68\055\uff68\057\uff68\060\uff68\061\uff68\062\uff68\001" +
    "\002\000\020\012\uff69\025\uff69\055\uff69\057\uff69\060\uff69" +
    "\061\uff69\062\uff69\001\002\000\020\012\uff66\025\uff66\055" +
    "\uff66\057\uff66\060\uff66\061\uff66\062\uff66\001\002\000\020" +
    "\012\uff6a\025\uff6a\055\uff6a\057\uff6a\060\uff6a\061\uff6a\062" +
    "\uff6a\001\002\000\020\012\121\025\117\055\133\057\125" +
    "\060\131\061\065\062\124\001\002\000\016\024\143\025" +
    "\144\042\uff8c\043\uff8c\044\uff8c\056\uff8c\001\002\000\012" +
    "\042\uff8e\043\uff8e\044\uff8e\056\uff8e\001\002\000\010\053" +
    "\072\056\uffb2\061\065\001\002\000\004\056\174\001\002" +
    "\000\006\046\114\056\uffb1\001\002\000\030\003\103\005" +
    "\077\011\071\013\102\014\063\015\070\020\064\021\106" +
    "\051\073\053\072\061\065\001\002\000\034\003\uffba\005" +
    "\uffba\007\uffba\011\uffba\013\uffba\014\uffba\015\uffba\020\uffba" +
    "\021\uffba\051\uffba\052\uffba\053\uffba\061\uffba\001\002\000" +
    "\020\012\121\025\117\055\133\057\125\060\131\061\065" +
    "\062\124\001\002\000\004\061\201\001\002\000\060\024" +
    "\uff70\025\uff70\026\uff70\027\uff70\030\uff70\031\uff70\032\uff70" +
    "\033\uff70\034\uff70\035\uff70\036\uff70\037\uff70\040\uff70\041" +
    "\uff70\042\uff70\043\uff70\044\uff70\046\uff70\047\uff70\053\uff70" +
    "\054\uff70\055\uff70\056\uff70\001\002\000\060\024\uff6f\025" +
    "\uff6f\026\uff6f\027\uff6f\030\uff6f\031\uff6f\032\uff6f\033\uff6f" +
    "\034\uff6f\035\uff6f\036\uff6f\037\uff6f\040\uff6f\041\uff6f\042" +
    "\uff6f\043\uff6f\044\uff6f\046\uff6f\047\uff6f\053\uff6f\054\uff6f" +
    "\055\uff6f\056\uff6f\001\002\000\010\024\143\025\144\054" +
    "\203\001\002\000\060\024\uff71\025\uff71\026\uff71\027\uff71" +
    "\030\uff71\031\uff71\032\uff71\033\uff71\034\uff71\035\uff71\036" +
    "\uff71\037\uff71\040\uff71\041\uff71\042\uff71\043\uff71\044\uff71" +
    "\046\uff71\047\uff71\053\uff71\054\uff71\055\uff71\056\uff71\001" +
    "\002\000\006\053\211\055\uff75\001\002\000\004\055\206" +
    "\001\002\000\022\012\121\025\117\055\133\056\uff8b\057" +
    "\125\060\131\061\065\062\124\001\002\000\004\056\210" +
    "\001\002\000\044\024\uff77\025\uff77\026\uff77\027\uff77\030" +
    "\uff77\034\uff77\035\uff77\036\uff77\037\uff77\040\uff77\041\uff77" +
    "\042\uff77\043\uff77\044\uff77\046\uff77\054\uff77\056\uff77\001" +
    "\002\000\020\012\121\025\117\055\133\057\125\060\131" +
    "\061\065\062\124\001\002\000\010\024\143\025\144\054" +
    "\213\001\002\000\044\024\uff78\025\uff78\026\uff78\027\uff78" +
    "\030\uff78\034\uff78\035\uff78\036\uff78\037\uff78\040\uff78\041" +
    "\uff78\042\uff78\043\uff78\044\uff78\046\uff78\054\uff78\056\uff78" +
    "\001\002\000\044\024\uff82\025\uff82\026\150\027\151\030" +
    "\147\034\uff82\035\uff82\036\uff82\037\uff82\040\uff82\041\uff82" +
    "\042\uff82\043\uff82\044\uff82\046\uff82\054\uff82\056\uff82\001" +
    "\002\000\004\056\234\001\002\000\030\003\103\005\077" +
    "\011\071\013\102\014\063\015\070\020\064\021\106\051" +
    "\073\053\072\061\065\001\002\000\020\012\121\025\117" +
    "\055\133\057\125\060\131\061\065\062\124\001\002\000" +
    "\010\042\uff91\043\uff91\056\uff91\001\002\000\010\042\226" +
    "\043\uff93\056\uff93\001\002\000\006\043\224\056\223\001" +
    "\002\000\030\003\uffb6\005\uffb6\011\uffb6\013\uffb6\014\uffb6" +
    "\015\uffb6\020\uffb6\021\uffb6\051\uffb6\053\uffb6\061\uffb6\001" +
    "\002\000\020\012\121\025\117\055\133\057\125\060\131" +
    "\061\065\062\124\001\002\000\010\042\226\043\uff92\056" +
    "\uff92\001\002\000\020\012\121\025\117\055\133\057\125" +
    "\060\131\061\065\062\124\001\002\000\010\042\uff90\043" +
    "\uff90\056\uff90\001\002\000\034\003\uffc4\005\uffc4\007\231" +
    "\011\uffc4\013\uffc4\014\uffc4\015\uffc4\020\uffc4\021\uffc4\051" +
    "\uffc4\052\uffc4\053\uffc4\061\uffc4\001\002\000\030\003\uffb9" +
    "\005\uffb9\011\uffb9\013\uffb9\014\uffb9\015\uffb9\020\uffb9\021" +
    "\uffb9\051\uffb9\053\uffb9\061\uffb9\001\002\000\030\003\103" +
    "\005\077\011\071\013\102\014\063\015\070\020\064\021" +
    "\106\051\073\053\072\061\065\001\002\000\034\003\uffc3" +
    "\005\uffc3\007\uffc3\011\uffc3\013\uffc3\014\uffc3\015\uffc3\020" +
    "\uffc3\021\uffc3\051\uffc3\052\uffc3\053\uffc3\061\uffc3\001\002" +
    "\000\030\003\uffb5\005\uffb5\011\uffb5\013\uffb5\014\uffb5\015" +
    "\uffb5\020\uffb5\021\uffb5\051\uffb5\053\uffb5\061\uffb5\001\002" +
    "\000\034\003\uffc5\005\uffc5\007\uffc5\011\uffc5\013\uffc5\014" +
    "\uffc5\015\uffc5\020\uffc5\021\uffc5\051\uffc5\052\uffc5\053\uffc5" +
    "\061\uffc5\001\002\000\020\012\121\025\117\055\133\057" +
    "\125\060\131\061\065\062\124\001\002\000\012\024\143" +
    "\025\144\046\240\056\241\001\002\000\004\062\243\001" +
    "\002\000\004\044\242\001\002\000\034\003\uffbd\005\uffbd" +
    "\007\uffbd\011\uffbd\013\uffbd\014\uffbd\015\uffbd\020\uffbd\021" +
    "\uffbd\051\uffbd\052\uffbd\053\uffbd\061\uffbd\001\002\000\004" +
    "\056\244\001\002\000\004\044\245\001\002\000\034\003" +
    "\uffbc\005\uffbc\007\uffbc\011\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\020\uffbc\021\uffbc\051\uffbc\052\uffbc\053\uffbc\061\uffbc\001" +
    "\002\000\010\026\247\046\uffa0\061\065\001\002\000\004" +
    "\061\065\001\002\000\004\046\252\001\002\000\010\046" +
    "\uffa1\047\177\053\176\001\002\000\010\026\uffa2\046\uffa2" +
    "\061\uffa2\001\002\000\010\047\177\053\176\054\254\001" +
    "\002\000\004\031\255\001\002\000\004\061\065\001\002" +
    "\000\010\044\uffa6\046\uffa6\056\uffa6\001\002\000\014\044" +
    "\uffa4\046\uffa4\047\177\053\176\056\uffa4\001\002\000\004" +
    "\045\261\001\002\000\004\061\263\001\002\000\060\024" +
    "\uff73\025\uff73\026\uff73\027\uff73\030\uff73\031\uff73\032\uff73" +
    "\033\uff73\034\uff73\035\uff73\036\uff73\037\uff73\040\uff73\041" +
    "\uff73\042\uff73\043\uff73\044\uff73\046\uff73\047\uff73\053\uff73" +
    "\054\uff73\055\uff73\056\uff73\001\002\000\060\024\uff6d\025" +
    "\uff6d\026\uff6d\027\uff6d\030\uff6d\031\uff6d\032\uff6d\033\uff6d" +
    "\034\uff6d\035\uff6d\036\uff6d\037\uff6d\040\uff6d\041\uff6d\042" +
    "\uff6d\043\uff6d\044\uff6d\046\uff6d\047\uff6d\053\uff6d\054\uff6d" +
    "\055\uff6d\056\uff6d\001\002\000\034\003\uffc2\005\uffc2\007" +
    "\uffc2\011\uffc2\013\uffc2\014\uffc2\015\uffc2\020\uffc2\021\uffc2" +
    "\051\uffc2\052\uffc2\053\uffc2\061\uffc2\001\002\000\022\012" +
    "\121\025\117\055\133\056\uff8b\057\125\060\131\061\065" +
    "\062\124\001\002\000\004\056\267\001\002\000\010\044" +
    "\uffa9\046\uffa9\056\uffa9\001\002\000\032\003\103\005\077" +
    "\011\071\013\102\014\063\015\070\020\064\021\106\051" +
    "\073\052\271\053\072\061\065\001\002\000\034\003\uffbb" +
    "\005\uffbb\007\uffbb\011\uffbb\013\uffbb\014\uffbb\015\uffbb\020" +
    "\uffbb\021\uffbb\051\uffbb\052\uffbb\053\uffbb\061\uffbb\001\002" +
    "\000\010\024\143\025\144\044\274\001\002\000\034\003" +
    "\uffbf\005\uffbf\007\uffbf\011\uffbf\013\uffbf\014\uffbf\015\uffbf" +
    "\020\uffbf\021\uffbf\051\uffbf\052\uffbf\053\uffbf\061\uffbf\001" +
    "\002\000\034\003\uffc0\005\uffc0\007\uffc0\011\uffc0\013\uffc0" +
    "\014\uffc0\015\uffc0\020\uffc0\021\uffc0\051\uffc0\052\uffc0\053" +
    "\uffc0\061\uffc0\001\002\000\034\003\uffc6\005\uffc6\007\uffc6" +
    "\011\uffc6\013\uffc6\014\uffc6\015\uffc6\020\uffc6\021\uffc6\051" +
    "\uffc6\052\uffc6\053\uffc6\061\uffc6\001\002\000\034\003\uffc1" +
    "\005\uffc1\007\uffc1\011\uffc1\013\uffc1\014\uffc1\015\uffc1\020" +
    "\uffc1\021\uffc1\051\uffc1\052\uffc1\053\uffc1\061\uffc1\001\002" +
    "\000\004\061\065\001\002\000\010\047\177\053\176\056" +
    "\301\001\002\000\004\044\302\001\002\000\034\003\uffbe" +
    "\005\uffbe\007\uffbe\011\uffbe\013\uffbe\014\uffbe\015\uffbe\020" +
    "\uffbe\021\uffbe\051\uffbe\052\uffbe\053\uffbe\061\uffbe\001\002" +
    "\000\020\012\121\025\117\055\133\057\125\060\131\061" +
    "\065\062\124\001\002\000\020\012\uff6c\025\uff6c\055\uff6c" +
    "\057\uff6c\060\uff6c\061\uff6c\062\uff6c\001\002\000\010\044" +
    "\uffa8\046\uffa8\056\uffa8\001\002\000\010\044\uffa7\046\uffa7" +
    "\056\uffa7\001\002\000\014\024\143\025\144\044\uffaa\046" +
    "\uffaa\056\uffaa\001\002\000\014\003\uffe4\022\uffe4\051\uffe4" +
    "\052\uffe4\061\uffe4\001\002\000\012\003\024\051\312\052" +
    "\uffdd\061\017\001\002\000\012\003\uffd7\016\uffd7\052\uffd7" +
    "\061\uffd7\001\002\000\012\003\uff9f\051\uff9f\052\uff9f\061" +
    "\uff9f\001\002\000\004\052\315\001\002\000\014\003\uffee" +
    "\006\uffee\010\uffee\051\uffee\061\uffee\001\002\000\012\003" +
    "\323\016\322\052\324\061\017\001\002\000\004\061\uffcf" +
    "\001\002\000\004\061\334\001\002\000\012\003\uffd6\016" +
    "\uffd6\052\uffd6\061\uffd6\001\002\000\004\061\uffd0\001\002" +
    "\000\004\056\333\001\002\000\004\052\uffde\001\002\000" +
    "\010\003\uff9e\051\uff9e\061\uff9e\001\002\000\010\003\024" +
    "\051\327\061\017\001\002\000\032\003\uffd4\005\uffd4\011" +
    "\uffd4\013\uffd4\014\uffd4\015\uffd4\020\uffd4\021\uffd4\051\uffd4" +
    "\052\uffd4\053\uffd4\061\uffd4\001\002\000\032\003\uffac\005" +
    "\uffac\011\uffac\013\uffac\014\uffac\015\uffac\020\uffac\021\uffac" +
    "\051\uffac\052\uffac\053\uffac\061\uffac\001\002\000\032\003" +
    "\103\005\077\011\071\013\102\014\063\015\070\020\064" +
    "\021\106\051\073\052\332\053\072\061\065\001\002\000" +
    "\012\003\uffd5\016\uffd5\052\uffd5\061\uffd5\001\002\000\010" +
    "\003\uffd2\051\uffd2\061\uffd2\001\002\000\004\055\uffd1\001" +
    "\002\000\004\055\336\001\002\000\006\056\uffcd\061\017" +
    "\001\002\000\004\061\uffc7\001\002\000\006\046\351\056" +
    "\uffce\001\002\000\006\046\uffcc\056\uffcc\001\002\000\004" +
    "\056\350\001\002\000\004\061\344\001\002\000\010\046" +
    "\uffc8\053\uffc8\056\uffc8\001\002\000\010\046\uffc9\053\346" +
    "\056\uffc9\001\002\000\004\054\347\001\002\000\006\046" +
    "\uffca\056\uffca\001\002\000\010\003\uffd3\051\uffd3\061\uffd3" +
    "\001\002\000\004\061\017\001\002\000\006\046\uffcb\056" +
    "\uffcb\001\002\000\014\003\uffea\022\uffea\051\uffea\052\uffea" +
    "\061\uffea\001\002\000\004\051\355\001\002\000\014\003" +
    "\uffec\022\uffec\051\uffec\052\uffec\061\uffec\001\002\000\004" +
    "\061\ufff9\001\002\000\004\061\362\001\002\000\006\044" +
    "\371\046\370\001\002\000\004\031\363\001\002\000\004" +
    "\031\ufff6\001\002\000\010\057\364\060\367\062\366\001" +
    "\002\000\006\044\ufff3\046\ufff3\001\002\000\006\044\ufff8" +
    "\046\ufff8\001\002\000\006\044\ufff5\046\ufff5\001\002\000" +
    "\006\044\ufff4\046\ufff4\001\002\000\004\061\362\001\002" +
    "\000\014\003\ufffa\006\ufffa\010\ufffa\051\ufffa\061\ufffa\001" +
    "\002\000\004\031\373\001\002\000\010\057\364\060\367" +
    "\062\366\001\002\000\006\044\ufff7\046\ufff7\001\002\000" +
    "\020\003\uff9a\006\uff9a\010\uff9a\022\uff9a\051\uff9a\052\uff9a" +
    "\061\uff9a\001\002\000\020\003\uff99\006\uff99\010\uff99\022" +
    "\uff99\051\uff99\052\uff99\061\uff99\001\002\000\020\003\uff98" +
    "\006\uff98\010\uff98\022\uff98\051\uff98\052\uff98\061\uff98\001" +
    "\002\000\004\061\u0102\001\002\000\006\044\u0106\046\u0105" +
    "\001\002\000\010\044\uff94\046\uff94\053\u0103\001\002\000" +
    "\004\054\u0104\001\002\000\006\044\uff95\046\uff95\001\002" +
    "\000\004\061\uff96\001\002\000\020\003\uff9d\006\uff9d\010" +
    "\uff9d\022\uff9d\051\uff9d\052\uff9d\061\uff9d\001\002\000\012" +
    "\003\323\016\322\052\u0108\061\017\001\002\000\004\002" +
    "\001\001\002\000\004\051\ufffd\001\002\000\004\051\u010b" +
    "\001\002\000\014\003\uffef\006\uffef\010\uffef\051\uffef\061" +
    "\uffef\001\002\000\014\003\024\006\027\010\026\051\u010d" +
    "\061\017\001\002\000\012\003\uffd7\016\uffd7\052\uffd7\061" +
    "\uffd7\001\002\000\012\003\323\016\322\052\u010f\061\017" +
    "\001\002\000\004\052\u0110\001\002\000\016\003\ufffe\006" +
    "\ufffe\010\ufffe\023\ufffe\051\ufffe\061\ufffe\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010f\000\004\047\003\001\001\000\002\001\001\000" +
    "\004\046\005\001\001\000\004\003\007\001\001\000\002" +
    "\001\001\000\006\004\012\051\011\001\001\000\004\050" +
    "\u0109\001\001\000\002\001\001\000\022\045\013\061\022" +
    "\062\027\065\020\067\017\070\014\074\024\103\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\u0106" +
    "\001\001\000\002\001\001\000\004\064\377\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\061\022\062\027\070" +
    "\355\073\356\001\001\000\004\104\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\105\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\061\022\062" +
    "\027\070\353\001\001\000\002\001\001\000\014\014\042" +
    "\015\043\106\046\107\047\110\045\001\001\000\006\107" +
    "\055\110\054\001\001\000\004\013\310\001\001\000\002" +
    "\001\001\000\020\020\057\045\013\061\022\062\027\065" +
    "\307\067\017\070\014\001\001\000\004\016\050\001\001" +
    "\000\002\001\001\000\014\014\052\017\051\106\053\107" +
    "\047\110\045\001\001\000\002\001\001\000\006\107\055" +
    "\110\054\001\001\000\002\001\001\000\004\020\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\060" +
    "\001\001\000\026\021\073\027\103\031\106\034\100\052" +
    "\077\053\075\054\061\057\074\111\104\114\065\001\001" +
    "\000\004\041\302\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\052\077\053\075\054\121\057\133\116\127\117" +
    "\131\120\271\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\267\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\245\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\112\215\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\022\110\025\112\034" +
    "\100\052\077\053\075\054\061\057\074\114\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\034\100\052\077\053\075\054\061\057\074\114\114" +
    "\001\001\000\002\001\001\000\026\052\077\053\075\054" +
    "\121\057\133\113\122\116\127\117\131\120\117\121\125" +
    "\122\126\001\001\000\016\052\077\053\075\054\121\057" +
    "\133\116\213\117\131\001\001\000\004\043\144\001\001" +
    "\000\012\060\204\061\022\062\027\070\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\165\001\001\000" +
    "\004\044\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\052\077\053\075\054\121\057\133\116\127\117" +
    "\131\120\155\001\001\000\002\001\001\000\026\035\137" +
    "\036\135\052\077\053\075\054\121\057\133\116\127\117" +
    "\131\120\136\126\140\001\001\000\002\001\001\000\004" +
    "\043\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\052\077\053\075\054\121\057\133\116\145\117\131\001" +
    "\001\000\004\044\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\052\077\053\075\054" +
    "\121\057\133\117\152\001\001\000\002\001\001\000\022" +
    "\052\077\053\075\054\121\057\133\116\127\117\131\120" +
    "\136\126\154\001\001\000\002\001\001\000\004\043\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\052\077\053\075\054\121\057" +
    "\133\116\127\117\131\120\166\123\167\001\001\000\004" +
    "\043\144\001\001\000\002\001\001\000\022\023\171\025" +
    "\172\034\100\052\077\053\075\054\061\057\074\114\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\027" +
    "\103\031\106\034\100\052\077\053\075\054\061\057\074" +
    "\111\174\114\065\001\001\000\002\001\001\000\020\052" +
    "\077\053\075\054\121\057\133\116\127\117\131\120\201" +
    "\001\001\000\004\056\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\035\206\036" +
    "\135\052\077\053\075\054\121\057\133\116\127\117\131" +
    "\120\136\126\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\052\077\053\075\054\121\057\133\116\127" +
    "\117\131\120\211\001\001\000\004\043\144\001\001\000" +
    "\002\001\001\000\004\044\151\001\001\000\002\001\001" +
    "\000\024\027\103\031\106\034\100\052\077\053\075\054" +
    "\061\057\074\111\227\114\065\001\001\000\030\052\077" +
    "\053\075\054\121\057\133\116\127\117\131\120\117\121" +
    "\217\122\126\124\221\125\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\052\077\053\075\054\121\057\133\116\127\117\131" +
    "\120\117\121\217\122\126\125\224\001\001\000\002\001" +
    "\001\000\024\052\077\053\075\054\121\057\133\116\127" +
    "\117\131\120\117\121\226\122\126\001\001\000\002\001" +
    "\001\000\004\030\231\001\001\000\002\001\001\000\024" +
    "\027\103\031\106\034\100\052\077\053\075\054\061\057" +
    "\074\111\232\114\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\052\077\053\075\054" +
    "\121\057\133\116\127\117\131\120\236\001\001\000\004" +
    "\043\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\033\247\052\077\053\075\054\250\001" +
    "\001\000\010\052\077\053\075\054\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\052\077\053\075\054\256" +
    "\115\255\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\261\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\035\265\036" +
    "\135\052\077\053\075\054\121\057\133\116\127\117\131" +
    "\120\136\126\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\027\103\031\106\034\100\052\077\053\075" +
    "\054\061\057\074\111\104\114\065\001\001\000\002\001" +
    "\001\000\004\043\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\052" +
    "\077\053\075\054\277\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\052\077\053\075\054" +
    "\121\057\133\116\127\117\131\120\306\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\144\001\001\000\002\001\001\000\020\007\313\045\013" +
    "\061\022\062\027\065\312\067\017\070\014\001\001\000" +
    "\004\010\315\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\011\324\061\022\062\027\070" +
    "\316\075\320\077\317\001\001\000\002\001\001\000\004" +
    "\076\334\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\325\001\001" +
    "\000\020\012\327\045\013\061\022\062\027\065\312\067" +
    "\017\070\014\001\001\000\002\001\001\000\004\026\330" +
    "\001\001\000\024\027\103\031\106\034\100\052\077\053" +
    "\075\054\061\057\074\111\104\114\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\037\341\040\337\061\022\062\027\070\336" +
    "\100\340\102\342\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\101\344" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\061\022" +
    "\062\027\070\336\100\351\102\342\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\357\072\360\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\071\364\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\072\371\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\071\373\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\066\u0100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\011\324\061" +
    "\022\062\027\070\316\075\320\077\317\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\u010b\001\001\000\022\045\013\061\022\062\027\065\020" +
    "\067\017\070\014\074\024\103\021\001\001\000\004\010" +
    "\u010d\001\001\000\016\011\324\061\022\062\027\070\316" +
    "\075\320\077\317\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }



	Logger log = Logger.getLogger(getClass());
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {
  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Mulop ::= MOD 
            {
              Mulop RESULT = null;
		 RESULT=new MulopMod(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Mulop ::= DIV 
            {
              Mulop RESULT = null;
		 RESULT=new MulopDiv(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Mulop ::= MUL 
            {
              Mulop RESULT = null;
		 RESULT=new MulopMul(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Addop ::= MINUS 
            {
              Addop RESULT = null;
		 RESULT=new AddopMinus(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*Addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Addop ::= PLUS 
            {
              Addop RESULT = null;
		 RESULT=new AddopPlus(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*Addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Relop ::= LTE 
            {
              Relop RESULT = null;
		 RESULT=new RelopLte(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Relop ::= LT 
            {
              Relop RESULT = null;
		 RESULT=new RelopLt(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Relop ::= GTE 
            {
              Relop RESULT = null;
		 RESULT=new RelopGte(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Relop ::= GT 
            {
              Relop RESULT = null;
		 RESULT=new RelopGt(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Relop ::= NEQ 
            {
              Relop RESULT = null;
		 RESULT=new RelopNeq(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Relop ::= EQ 
            {
              Relop RESULT = null;
		 RESULT=new RelopEq(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Assignop ::= EQUAL 
            {
              Assignop RESULT = null;
		 RESULT=new Assignop(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*Assignop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // DesignatorName ::= IDENT 
            {
              DesignatorName RESULT = null;
		int DesignatorNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int DesignatorNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String DesignatorName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorName(DesignatorName); RESULT.setLine(DesignatorNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*DesignatorName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // DesignatorNamespaceName ::= IDENT 
            {
              DesignatorNamespaceName RESULT = null;
		int NamespaceNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int NamespaceNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String NamespaceName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorNamespaceName(NamespaceName); RESULT.setLine(NamespaceNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*DesignatorNamespaceName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // DesignatorIdent ::= IDENT 
            {
              DesignatorIdent RESULT = null;
		int identleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorIdent(ident); RESULT.setLine(identleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(44/*DesignatorIdent*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Designator ::= Designator DOT DesignatorIdent 
            {
              Designator RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator d = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorIdent D1 = (DesignatorIdent)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorIdentStmt(d, D1); RESULT.setLine(dleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Designator ::= Designator LBRACKET Expr RBRACKET 
            {
              Designator RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Designator d = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorExprStmt(d, e); RESULT.setLine(dleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Designator ::= DesignatorName 
            {
              Designator RESULT = null;
		int dnleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int dnright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorName dn = (DesignatorName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorNoNamespace(dn); RESULT.setLine(dnleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Designator ::= DesignatorNamespaceName COLON COLON DesignatorName 
            {
              Designator RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		DesignatorNamespaceName d = (DesignatorNamespaceName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int dnleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int dnright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorName dn = (DesignatorName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorNamespace(d, dn); RESULT.setLine(dleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // DesignatorCall ::= Designator 
            {
              DesignatorCall RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorCall(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*DesignatorCall*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ConstructorCall ::= Type 
            {
              ConstructorCall RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstructorCall(T1); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(46/*ConstructorCall*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Factor ::= LPAREN Expr RPAREN 
            {
              Factor RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FactorExpr(e); RESULT.setLine(eleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(77/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Factor ::= NEW ConstructorCall LPAREN ActPars RPAREN 
            {
              Factor RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ConstructorCall C1 = (ConstructorCall)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ActPars a = (ActPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FactorNewAct(C1, a); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(77/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Factor ::= NEW Type LBRACKET Expr RBRACKET 
            {
              Factor RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FactorNewExpr(t, e); RESULT.setLine(tleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(77/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Factor ::= BOOL_CONST 
            {
              Factor RESULT = null;
		int B1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int B1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Boolean B1 = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorBool(B1); RESULT.setLine(B1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(77/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Factor ::= CHAR_CONST 
            {
              Factor RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Character C1 = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorChar(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(77/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Factor ::= NUM_CONST 
            {
              Factor RESULT = null;
		int N1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer N1 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorNum(N1); RESULT.setLine(N1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(77/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Factor ::= Designator 
            {
              Factor RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorDesignatorNoAct(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(77/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Factor ::= DesignatorCall LPAREN ActPars RPAREN 
            {
              Factor RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		DesignatorCall D1 = (DesignatorCall)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ActPars A2 = (ActPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FactorDesignatorAct(D1, A2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(77/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Term ::= Term Mulop Factor 
            {
              Term RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Mulop M1 = (Mulop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TermMore(t, M1, f); RESULT.setLine(tleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(76/*Term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Term ::= Factor 
            {
              Term RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TermLast(f); RESULT.setLine(fleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(76/*Term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Expr ::= Expr Addop Term 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Addop A1 = (Addop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ExprMore(e, A1, t); RESULT.setLine(eleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(78/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Expr ::= Term 
            {
              Expr RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ExprLast(t); RESULT.setLine(tleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(78/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Expr ::= MINUS Term 
            {
              Expr RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ExprLastMinus(t); RESULT.setLine(tleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(78/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // TypeNamespace ::= IDENT 
            {
              TypeNamespace RESULT = null;
		int namespaceleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int namespaceright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String namespace = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TypeNamespace(namespace); RESULT.setLine(namespaceleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*TypeNamespace*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // TypeName ::= IDENT 
            {
              TypeName RESULT = null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TypeName(typeName); RESULT.setLine(typeNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(47/*TypeName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Type ::= TypeName 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		TypeName t = (TypeName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TypeNamespaceNo(t); RESULT.setLine(tleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(54/*Type*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Type ::= TypeNamespace COLON COLON TypeName 
            {
              Type RESULT = null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		TypeNamespace tn = (TypeNamespace)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		TypeName t = (TypeName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TypeNamespaceYes(tn, t); RESULT.setLine(tnleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(54/*Type*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ActParSingle ::= Expr 
            {
              ActParSingle RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ActParSingle(e); RESULT.setLine(eleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(84/*ActParSingle*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ActParsList ::= ActParsList COMMA ActParSingle 
            {
              ActParsList RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ActParsList A1 = (ActParsList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ActParSingle a = (ActParSingle)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ActParsListMore(A1, a); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*ActParsList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ActParsList ::= ActParSingle 
            {
              ActParsList RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ActParSingle a = (ActParSingle)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ActParsListLast(a); RESULT.setLine(aleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*ActParsList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ActPars ::= ActParsList 
            {
              ActPars RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ActParsList A1 = (ActParsList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ActParsNotEmpty(A1); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*ActPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ActPars ::= 
            {
              ActPars RESULT = null;
		 RESULT=new ActParsEmpty(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*ActPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CondFactExpr2 ::= Expr 
            {
              CondFactExpr2 RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondFactExpr2(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(81/*CondFactExpr2*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CondFactExpr1 ::= Expr 
            {
              CondFactExpr1 RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondFactExpr1(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(80/*CondFactExpr1*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CondFact ::= CondFactExpr1 Relop CondFactExpr2 
            {
              CondFact RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		CondFactExpr1 C1 = (CondFactExpr1)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int R2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int R2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Relop R2 = (Relop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int C3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFactExpr2 C3 = (CondFactExpr2)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondFactMultiple(C1, R2, C3); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(79/*CondFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CondFact ::= Expr 
            {
              CondFact RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondFactSingle(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(79/*CondFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CondTerm ::= CondTerm AND CondFact 
            {
              CondTerm RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		CondTerm C1 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFact C2 = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondTermMore(C1, C2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(83/*CondTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CondTerm ::= CondFact 
            {
              CondTerm RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFact C1 = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondTermLast(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(83/*CondTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Condition ::= Condition OR CondTerm 
            {
              Condition RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Condition C1 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondTerm C2 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConditionMore(C1, C2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(82/*Condition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Condition ::= CondTerm 
            {
              Condition RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondTerm C1 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConditionLast(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(82/*Condition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // VarDeclSingle ::= IDENT 
            {
              VarDeclSingle RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarDeclSingleNotArray(varName); RESULT.setLine(varNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(52/*VarDeclSingle*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VarDeclSingle ::= IDENT LBRACKET RBRACKET 
            {
              VarDeclSingle RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new VarDeclSingleArray(varName); RESULT.setLine(varNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(52/*VarDeclSingle*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VarDeclList ::= VarDeclList VarDeclSingle COMMA 
            {
              VarDeclList RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		VarDeclList V1 = (VarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int vdsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int vdsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarDeclSingle vds = (VarDeclSingle)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new VarDeclListMore(V1, vds); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(50/*VarDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VarDeclList ::= 
            {
              VarDeclList RESULT = null;
		 RESULT=new VarDeclListLast(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(50/*VarDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ErrorSign ::= error SEMICOLON 
            {
              ErrorSign RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);   RESULT=new ErrorSignSEMICOLON(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(35/*ErrorSign*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ErrorSign ::= error LBRACE 
            {
              ErrorSign RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do { u liniji " + lleft, null);   RESULT=new ErrorSignLbrace(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(35/*ErrorSign*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ErrorSign ::= error COMMA 
            {
              ErrorSign RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do , u liniji " + lleft, null);   RESULT=new ErrorSignComma(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(35/*ErrorSign*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VarType ::= Type 
            {
              VarType RESULT = null;
		int varTypeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int varTypeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type varTypeName = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarType(varTypeName); RESULT.setLine(varTypeNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(53/*VarType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VarDecl ::= ErrorSign 
            {
              VarDecl RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ErrorSign E1 = (ErrorSign)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ErrorVarDeclComma(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(51/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VarDecl ::= VarType VarDeclList VarDeclSingle SEMICOLON 
            {
              VarDecl RESULT = null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		VarType vt = (VarType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		VarDeclList V1 = (VarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int vdsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int vdsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarDeclSingle vds = (VarDeclSingle)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new VarDeclOk(vt, V1, vds); RESULT.setLine(vtleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(51/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // VarDeclOrNot ::= 
            {
              VarDeclOrNot RESULT = null;
		 RESULT=new VarDeclNo(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*VarDeclOrNot*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VarDeclOrNot ::= VarDeclOrNot VarDecl 
            {
              VarDeclOrNot RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarDeclOrNot V1 = (VarDeclOrNot)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDecl V2 = (VarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarDeclYes(V1, V2); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*VarDeclOrNot*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DesignatorStatementListMemberOrNot ::= 
            {
              DesignatorStatementListMemberOrNot RESULT = null;
		 RESULT=new DesignatorStatementListMemberNot(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*DesignatorStatementListMemberOrNot*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DesignatorStatementListMemberOrNot ::= Designator 
            {
              DesignatorStatementListMemberOrNot RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorStatementListMemberYes(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*DesignatorStatementListMemberOrNot*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DesignatorStatementList ::= DesignatorStatementList DesignatorStatementListMemberOrNot COMMA 
            {
              DesignatorStatementList RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		DesignatorStatementList D1 = (DesignatorStatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int D2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		DesignatorStatementListMemberOrNot D2 = (DesignatorStatementListMemberOrNot)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorStatementListMore(D1, D2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*DesignatorStatementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DesignatorStatementList ::= 
            {
              DesignatorStatementList RESULT = null;
		 RESULT=new DesignatorStatementListLast(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*DesignatorStatementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DesignatorAssignedArray ::= Designator 
            {
              DesignatorAssignedArray RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorAssignedArray(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(75/*DesignatorAssignedArray*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DesignatorEqStmtStart ::= LBRACKET 
            {
              DesignatorEqStmtStart RESULT = null;
		 RESULT=new DesignatorEqStmtStart(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*DesignatorEqStmtStart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DesignatorStatement ::= DesignatorEqStmtStart DesignatorStatementList MUL Designator RBRACKET EQUAL DesignatorAssignedArray 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		DesignatorEqStmtStart D1 = (DesignatorEqStmtStart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int D2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int D2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		DesignatorStatementList D2 = (DesignatorStatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int D3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int D3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Designator D3 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int D4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorAssignedArray D4 = (DesignatorAssignedArray)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorEqStmt(D1, D2, D3, D4); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(74/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DesignatorStatement ::= Designator DEC 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorStmtDec(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(74/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DesignatorStatement ::= Designator INC 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorStmtInc(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(74/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DesignatorStatement ::= DesignatorCall LPAREN ActPars RPAREN 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		DesignatorCall D1 = (DesignatorCall)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ActPars A2 = (ActPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorStmtAct(D1, A2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(74/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DesignatorStatement ::= Designator Assignop Expr 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Assignop A2 = (Assignop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int E3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E3 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorStmtAssign(D1, A2, E3); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(74/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // StatementList ::= StatementList Statement 
            {
              StatementList RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S1 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StatementListMore(S1, S2); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // StatementList ::= 
            {
              StatementList RESULT = null;
		 RESULT=new StatementListLast(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ForDesignatorStatementList ::= ForDesignatorStatementList COMMA DesignatorStatement 
            {
              ForDesignatorStatementList RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ForDesignatorStatementList F1 = (ForDesignatorStatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int D2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorStatement D2 = (DesignatorStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ForDesignatorStatementListMore(F1, D2); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*ForDesignatorStatementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ForDesignatorStatementList ::= DesignatorStatement 
            {
              ForDesignatorStatementList RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorStatement D1 = (DesignatorStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ForDesignatorStatementListLast(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*ForDesignatorStatementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ForCondFact ::= CondFact 
            {
              ForCondFact RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFact C1 = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ForCondFactNotEmpty(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(73/*ForCondFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ForCondFact ::= 
            {
              ForCondFact RESULT = null;
		 RESULT=new ForCondFactEmpty(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(73/*ForCondFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ForAfter ::= ForDesignatorStatementList 
            {
              ForAfter RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ForDesignatorStatementList F1 = (ForDesignatorStatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ForAfterNotEmpty(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*ForAfter*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ForAfter ::= 
            {
              ForAfter RESULT = null;
		 RESULT=new ForAfterEmpty(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*ForAfter*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ForInit ::= ForDesignatorStatementList 
            {
              ForInit RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ForDesignatorStatementList F1 = (ForDesignatorStatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ForInitNotEmpty(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*ForInit*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ForInit ::= 
            {
              ForInit RESULT = null;
		 RESULT=new ForInitEmpty(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*ForInit*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // IfCond ::= error RPAREN 
            {
              IfCond RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do ) u liniji " + lleft, null);   RESULT=new ErrorIf(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(72/*IfCond*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IfCond ::= LPAREN Condition RPAREN 
            {
              IfCond RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Condition C1 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new IfCondOk(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(72/*IfCond*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IfWord ::= IF 
            {
              IfWord RESULT = null;
		 RESULT=new IfWord(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*IfWord*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ForWord ::= FOR 
            {
              ForWord RESULT = null;
		 RESULT=new ForWord(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*ForWord*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ElseBegin ::= ELSE 
            {
              ElseBegin RESULT = null;
		 RESULT=new ElseBegin(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*ElseBegin*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Statement ::= ForWord LPAREN ForInit SEMICOLON ForCondFact SEMICOLON ForAfter RPAREN Statement 
            {
              Statement RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		ForWord F1 = (ForWord)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		ForInit F2 = (ForInit)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int F3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int F3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ForCondFact F3 = (ForCondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int F4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int F4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ForAfter F4 = (ForAfter)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int S5left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S5right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S5 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StatementFor(F1, F2, F3, F4, S5); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(71/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Statement ::= LBRACE StatementList RBRACE 
            {
              Statement RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S1 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Statements(S1); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(71/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Statement ::= PRINT LPAREN Expr COMMA NUM_CONST RPAREN SEMICOLON 
            {
              Statement RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer N2 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new StatementPrintNum(E1, N2); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(71/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Statement ::= PRINT LPAREN Expr RPAREN SEMICOLON 
            {
              Statement RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new StatementPrintNoNum(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(71/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Statement ::= READ LPAREN Designator RPAREN SEMICOLON 
            {
              Statement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new StatementRead(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(71/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Statement ::= RETURN SEMICOLON 
            {
              Statement RESULT = null;
		 RESULT=new StatementReturn(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(71/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Statement ::= RETURN Expr SEMICOLON 
            {
              Statement RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new StatementReturnExpr(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(71/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Statement ::= CONTINUE SEMICOLON 
            {
              Statement RESULT = null;
		 RESULT=new StatementContinue(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(71/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Statement ::= BREAK SEMICOLON 
            {
              Statement RESULT = null;
		 RESULT=new StatementBreak(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(71/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Statement ::= IfWord IfCond Statement ElseBegin Statement 
            {
              Statement RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		IfWord I1 = (IfWord)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int I2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int I2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		IfCond I2 = (IfCond)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int S3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int S3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Statement S3 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int E4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ElseBegin E4 = (ElseBegin)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S5left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S5right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S5 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StatementIfElse(I1, I2, S3, E4, S5); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(71/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Statement ::= IfWord IfCond Statement 
            {
              Statement RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		IfWord I1 = (IfWord)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int I2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int I2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		IfCond I2 = (IfCond)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S3 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StatementIf(I1, I2, S3); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(71/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Statement ::= error SEMICOLON 
            {
              Statement RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);   RESULT=new ErrorAssignSemicolon(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(71/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Statement ::= DesignatorStatement SEMICOLON 
            {
              Statement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		DesignatorStatement D1 = (DesignatorStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new StatementDesignator(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(71/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FormParType ::= Type 
            {
              FormParType RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type name = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormParType(name); RESULT.setLine(nameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(64/*FormParType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FormParName ::= IDENT 
            {
              FormParName RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormParName(name); RESULT.setLine(nameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(63/*FormParName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FormPar ::= FormParType FormParName 
            {
              FormPar RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		FormParType t = (FormParType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormParName n = (FormParName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormParNotArray(t, n); RESULT.setLine(tleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(62/*FormPar*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FormPar ::= FormParType FormParName LBRACKET RBRACKET 
            {
              FormPar RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		FormParType t = (FormParType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		FormParName n = (FormParName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new FormParArray(t, n); RESULT.setLine(tleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(62/*FormPar*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FormPars ::= FormPars COMMA FormPar 
            {
              FormPars RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		FormPars F1 = (FormPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormPar F2 = (FormPar)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormParsMore(F1, F2); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*FormPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FormPars ::= FormPar 
            {
              FormPars RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormPar F1 = (FormPar)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormParsLast(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*FormPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FormParsOrNot ::= 
            {
              FormParsOrNot RESULT = null;
		 RESULT=new FormParsNot(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*FormParsOrNot*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FormParsOrNot ::= FormPars 
            {
              FormParsOrNot RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormPars F1 = (FormPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormParsYes(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*FormParsOrNot*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // MethodType ::= Type 
            {
              MethodType RESULT = null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type typeName = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TypeMethodType(typeName); RESULT.setLine(typeNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(61/*MethodType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // MethodType ::= VOID 
            {
              MethodType RESULT = null;
		 RESULT=new VoidMethodType(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(61/*MethodType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // MethodName ::= IDENT 
            {
              MethodName RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodName(name); RESULT.setLine(nameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(60/*MethodName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MethodDeclParams ::= error RPAREN 
            {
              MethodDeclParams RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do ) u liniji " + lleft, null);   RESULT=new ErrorMethodDecl(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*MethodDeclParams*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MethodDeclParams ::= MethodType MethodName LPAREN FormParsOrNot RPAREN 
            {
              MethodDeclParams RESULT = null;
		int mtleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int mtright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		MethodType mt = (MethodType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int mnleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		MethodName mn = (MethodName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		FormParsOrNot F1 = (FormParsOrNot)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MethodDeclParamsOk(mt, mn, F1); RESULT.setLine(mtleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*MethodDeclParams*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MethodBegin ::= LBRACE 
            {
              MethodBegin RESULT = null;
		 RESULT=new MethodBegin(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*MethodBegin*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MethodDecl ::= MethodDeclParams VarDeclOrNot MethodBegin StatementList RBRACE 
            {
              MethodDecl RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		MethodDeclParams M1 = (MethodDeclParams)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		VarDeclOrNot V2 = (VarDeclOrNot)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int M3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int M3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		MethodBegin M3 = (MethodBegin)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int S4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S4 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MethodDecl(M1, V2, M3, S4); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(59/*MethodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              MethodDeclList RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDeclList M1 = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		MethodDecl M2 = (MethodDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodDeclMore(M1, M2); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(6/*MethodDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MethodDeclList ::= 
            {
              MethodDeclList RESULT = null;
		 RESULT=new MethodDeclLast(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(6/*MethodDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // StaticInitializerList ::= StaticInitializerList StaticInitializer 
            {
              StaticInitializerList RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StaticInitializerList S1 = (StaticInitializerList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		StaticInitializer S2 = (StaticInitializer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StaticInitializerListMore(S1, S2); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*StaticInitializerList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // StaticInitializerList ::= StaticInitializer 
            {
              StaticInitializerList RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		StaticInitializer S1 = (StaticInitializer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StaticInitializerListLast(S1); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*StaticInitializerList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // StaticInitializerEnd ::= RBRACE 
            {
              StaticInitializerEnd RESULT = null;
		 RESULT=new StaticInitializerEnd(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*StaticInitializerEnd*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // StaticInitializerStart ::= LBRACE 
            {
              StaticInitializerStart RESULT = null;
		 RESULT=new StaticInitializerStart(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*StaticInitializerStart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // StaticInitializer ::= StaticWord StaticInitializerStart StatementList StaticInitializerEnd 
            {
              StaticInitializer RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		StaticWord S1 = (StaticWord)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		StaticInitializerStart S2 = (StaticInitializerStart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int S3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S3 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		StaticInitializerEnd S4 = (StaticInitializerEnd)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StaticInitializer(S1, S2, S3, S4); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(69/*StaticInitializer*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MethodDeclListClass ::= 
            {
              MethodDeclListClass RESULT = null;
		 RESULT=new MethodDeclListClassNo(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*MethodDeclListClass*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MethodDeclListClass ::= LBRACE MethodDeclList RBRACE 
            {
              MethodDeclListClass RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDeclList M1 = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MethodDeclListClassYes(M1); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*MethodDeclListClass*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // StaticDeclList ::= StaticDeclList StaticWord VarDecl 
            {
              StaticDeclList RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		StaticDeclList S1 = (StaticDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StaticWord S2 = (StaticWord)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int V3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDecl V3 = (VarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StaticDeclListMore(S1, S2, V3); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*StaticDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // StaticDeclList ::= 
            {
              StaticDeclList RESULT = null;
		 RESULT=new StaticDeclListLast(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*StaticDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // StaticInitializerOrNot ::= 
            {
              StaticInitializerOrNot RESULT = null;
		 RESULT=new StaticInitializerNo(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*StaticInitializerOrNot*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // StaticInitializerOrNot ::= StaticInitializerList 
            {
              StaticInitializerOrNot RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		StaticInitializerList S1 = (StaticInitializerList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StaticInitializerYes(S1); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*StaticInitializerOrNot*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // StaticWord ::= STATIC 
            {
              StaticWord RESULT = null;
		 RESULT=new StaticWord(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(70/*StaticWord*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // StaticVarDecl ::= StaticWord VarDecl 
            {
              StaticVarDecl RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StaticWord S1 = (StaticWord)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDecl V2 = (VarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StaticVarDecl(S1, V2); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(68/*StaticVarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // StaticVars ::= StaticVars StaticVarDecl 
            {
              StaticVars RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StaticVars S1 = (StaticVars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		StaticVarDecl S2 = (StaticVarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StaticVarsMore(S1, S2); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*StaticVars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // StaticVars ::= 
            {
              StaticVars RESULT = null;
		 RESULT=new StaticVarsLast(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*StaticVars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // StaticOrNot ::= 
            {
              StaticOrNot RESULT = null;
		 RESULT=new StaticNot(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*StaticOrNot*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // StaticOrNot ::= StaticInitializerList 
            {
              StaticOrNot RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		StaticInitializerList S1 = (StaticInitializerList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StaticVarsNot(S1); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*StaticOrNot*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // StaticOrNot ::= StaticVarDecl StaticVars StaticInitializerOrNot 
            {
              StaticOrNot RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		StaticVarDecl S1 = (StaticVarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StaticVars S2 = (StaticVars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		StaticInitializerOrNot S3 = (StaticInitializerOrNot)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StaticVarsYes(S1, S2, S3); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*StaticOrNot*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ExtendsOrNot ::= error LBRACE 
            {
              ExtendsOrNot RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do { u liniji " + lleft, null);   RESULT=new ErrorExtends(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(67/*ExtendsOrNot*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ExtendsOrNot ::= LBRACE 
            {
              ExtendsOrNot RESULT = null;
		 RESULT=new ExtendsNot(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(67/*ExtendsOrNot*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ExtendsOrNot ::= EXTENDS Type LBRACE 
            {
              ExtendsOrNot RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ExtendsYes(T1); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(67/*ExtendsOrNot*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ClassName ::= IDENT 
            {
              ClassName RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ClassName(className); RESULT.setLine(classNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(66/*ClassName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ClassDecl ::= CLASS ClassName ExtendsOrNot StaticOrNot VarDeclOrNot MethodDeclListClass RBRACE 
            {
              ClassDecl RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		ClassName C1 = (ClassName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ExtendsOrNot E2 = (ExtendsOrNot)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int S3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int S3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		StaticOrNot S3 = (StaticOrNot)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int V4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int V4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		VarDeclOrNot V4 = (VarDeclOrNot)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int M5left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M5right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDeclListClass M5 = (MethodDeclListClass)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ClassDecl(C1, E2, S3, V4, M5); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(65/*ClassDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // List ::= 
            {
              List RESULT = null;
		 RESULT=new EmptyDeclList(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*List*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // List ::= List ClassDecl 
            {
              List RESULT = null;
		int L1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int L1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		List L1 = (List)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ClassDecl C2 = (ClassDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ListClassDecl(L1, C2); RESULT.setLine(L1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*List*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // List ::= List ConstDecl 
            {
              List RESULT = null;
		int L1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int L1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		List L1 = (List)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstDecl C2 = (ConstDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ListConstDecl(L1, C2); RESULT.setLine(L1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*List*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // List ::= List VarDecl 
            {
              List RESULT = null;
		int L1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int L1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		List L1 = (List)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDecl V2 = (VarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ListVarDecl(L1, V2); RESULT.setLine(L1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*List*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstVar ::= BOOL_CONST 
            {
              ConstVar RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Boolean name = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new BoolConst(name); RESULT.setLine(nameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(55/*ConstVar*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstVar ::= CHAR_CONST 
            {
              ConstVar RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Character name = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CharConst(name); RESULT.setLine(nameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(55/*ConstVar*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstVar ::= NUM_CONST 
            {
              ConstVar RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer name = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new NumConst(name); RESULT.setLine(nameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(55/*ConstVar*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstName ::= IDENT 
            {
              ConstName RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstName(name); RESULT.setLine(nameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(56/*ConstName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstDeclList ::= ConstDeclList COMMA ConstName EQUAL ConstVar 
            {
              ConstDeclList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ConstDeclList C1 = (ConstDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ConstName c = (ConstName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int cvleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstVar cv = (ConstVar)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstDeclMore(C1, c, cv); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*ConstDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstDeclList ::= ConstName EQUAL ConstVar 
            {
              ConstDeclList RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ConstName c = (ConstName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int cvleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstVar cv = (ConstVar)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstDeclLast(c, cv); RESULT.setLine(cleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*ConstDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ConstType ::= Type 
            {
              ConstType RESULT = null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type typeName = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstType(typeName); RESULT.setLine(typeNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(57/*ConstType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ConstDecl ::= CONST ConstType ConstDeclList SEMICOLON 
            {
              ConstDecl RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ConstType c = (ConstType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ConstDeclList C1 = (ConstDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ConstDecl(c, C1); RESULT.setLine(cleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(58/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NamespaceList ::= NamespaceList NamespaceSingle 
            {
              NamespaceList RESULT = null;
		int N1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		NamespaceList N1 = (NamespaceList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		NamespaceSingle N2 = (NamespaceSingle)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new NamespaceListMore(N1, N2); RESULT.setLine(N1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*NamespaceList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NamespaceList ::= 
            {
              NamespaceList RESULT = null;
		 RESULT=new NamespaceListLast(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*NamespaceList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NamespaceName ::= IDENT 
            {
              NamespaceName RESULT = null;
		int namespaceNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int namespaceNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String namespaceName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new NamespaceName(namespaceName); RESULT.setLine(namespaceNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*NamespaceName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NamespaceSingle ::= NAMESPACE NamespaceName LBRACE List LBRACE MethodDeclList RBRACE RBRACE 
            {
              NamespaceSingle RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		NamespaceName n = (NamespaceName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int L1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int L1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		List L1 = (List)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		MethodDeclList M2 = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new NamespaceSingle(n, L1, M2); RESULT.setLine(nleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(39/*NamespaceSingle*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgramName ::= IDENT 
            {
              ProgramName RESULT = null;
		int programNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int programNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String programName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ProgramName(programName); RESULT.setLine(programNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(36/*ProgramName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              SyntaxNode RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROG ProgramName NamespaceList List LBRACE MethodDeclList RBRACE 
            {
              Program RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		ProgramName p = (ProgramName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int N1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		NamespaceList N1 = (NamespaceList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int L2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int L2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		List L2 = (List)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int M3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDeclList M3 = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Program(p, N1, L2, M3); RESULT.setLine(pleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*Program*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

