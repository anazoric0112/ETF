
package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, BREAK, CLASS, ELSE, CONST, IF, NEW, PRINT, READ, RETURN, VOID, EXTENDS, CONTINUE, FOR, STATIC, NAMESPACE;
terminal PLUS, MINUS, MUL, DIV, MOD, EQUAL, INC, DEC;
terminal EQ, NEQ, GT, GTE, LT, LTE, AND, OR;
terminal SEMICOLON, COLON, COMMA, DOT, ARROW;
terminal LBRACE, RBRACE, LBRACKET, RBRACKET, LPAREN, RPAREN;
terminal Boolean BOOL_CONST;
terminal Character CHAR_CONST;
terminal String IDENT;
terminal Integer NUM_CONST;

nonterminal NamespaceList NamespaceList;
nonterminal List List;
nonterminal ConstDeclList ConstDeclList;
nonterminal StaticDeclList StaticDeclList;
nonterminal MethodDeclListClass MethodDeclListClass;
nonterminal MethodDeclList MethodDeclList;
nonterminal MethodDeclParams MethodDeclParams;
nonterminal MethodBegin MethodBegin;
nonterminal VarDeclOrNot VarDeclOrNot;
nonterminal StaticInitializerList StaticInitializerList;
nonterminal StaticOrNot StaticOrNot;
nonterminal StaticVars StaticVars;
nonterminal StaticInitializerOrNot StaticInitializerOrNot;
nonterminal StaticInitializerStart StaticInitializerStart;
nonterminal StaticInitializerEnd StaticInitializerEnd;
nonterminal ForInit ForInit;
nonterminal ForAfter ForAfter;
nonterminal ForStatements ForStatements;
nonterminal ForDesignatorStatementList ForDesignatorStatementList;
nonterminal StatementList StatementList;
nonterminal IfWord IfWord;
nonterminal ElseBegin ElseBegin;
nonterminal ForWord ForWord;
nonterminal DesignatorStatementList DesignatorStatementList;
nonterminal DesignatorStatementListMemberOrNot DesignatorStatementListMemberOrNot;
nonterminal DesignatorEqStmtStart DesignatorEqStmtStart;
nonterminal ActPars ActPars;
nonterminal ActParsList ActParsList;
nonterminal FormParsOrNot FormParsOrNot;
nonterminal FormPars FormPars;
nonterminal Assignop Assignop;
nonterminal Relop Relop;
nonterminal Addop Addop;
nonterminal Mulop Mulop;
nonterminal ErrorSign ErrorSign;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgramName, Program;
nonterminal rs.etf.pp1.symboltable.concepts.Obj NamespaceName, NamespaceSingle;
nonterminal rs.etf.pp1.symboltable.concepts.Obj DesignatorNamespaceName, DesignatorName, 
            Designator, DesignatorExpr, DesignatorIdent, DesignatorCall, ConstructorCall;
nonterminal rs.etf.pp1.symboltable.concepts.Obj TypeName, TypeNamespace, FactorType;
nonterminal rs.etf.pp1.symboltable.concepts.Obj VarDeclList, VarDecl, VarDeclSingle, VarType, Type;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ConstVar, ConstName, ConstType, ConstDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodDecl, MethodName, MethodType;
nonterminal rs.etf.pp1.symboltable.concepts.Obj FormPar, FormParName, FormParType;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ClassDecl, ClassName, ExtendsOrNot;
nonterminal rs.etf.pp1.symboltable.concepts.Obj StaticVarDecl, StaticInitializer, StaticWord;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Statement, IfCond, ForCondFact, DesignatorStatement, DesignatorAssignedArray;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Term, Factor, Expr;
nonterminal rs.etf.pp1.symboltable.concepts.Struct CondFact, CondFactExpr1, CondFactExpr2, Condition, CondTerm, ActParSingle;

precedence left ELSE;

Program ::= 
    (Program) PROG ProgramName:p NamespaceList:N1 List:L2 LBRACE MethodDeclList:M3 RBRACE {: RESULT=new Program(p, N1, L2, M3); RESULT.setLine(pleft); :};

ProgramName ::= 
    (ProgramName) IDENT:programName {: RESULT=new ProgramName(programName); RESULT.setLine(programNameleft); :};

NamespaceSingle ::= 
    (NamespaceSingle) NAMESPACE NamespaceName:n LBRACE List:L1 LBRACE MethodDeclList:M2 RBRACE RBRACE {: RESULT=new NamespaceSingle(n, L1, M2); RESULT.setLine(nleft); :};

NamespaceName ::= 
    (NamespaceName) IDENT:namespaceName {: RESULT=new NamespaceName(namespaceName); RESULT.setLine(namespaceNameleft); :};

NamespaceList ::= 
    (NamespaceListLast) {: RESULT=new NamespaceListLast(); :} /* epsilon */
    | (NamespaceListMore) NamespaceList:N1 NamespaceSingle:N2 {: RESULT=new NamespaceListMore(N1, N2); RESULT.setLine(N1left); :};

ConstDecl ::= 
    (ConstDecl) CONST ConstType:c ConstDeclList:C1 SEMICOLON {: RESULT=new ConstDecl(c, C1); RESULT.setLine(cleft); :};

ConstType ::= 
    (ConstType) Type:typeName {: RESULT=new ConstType(typeName); RESULT.setLine(typeNameleft); :};

ConstDeclList ::= 
    (ConstDeclLast) ConstName:c EQUAL ConstVar:cv {: RESULT=new ConstDeclLast(c, cv); RESULT.setLine(cleft); :}
    | (ConstDeclMore) ConstDeclList:C1 COMMA ConstName:c EQUAL ConstVar:cv {: RESULT=new ConstDeclMore(C1, c, cv); RESULT.setLine(C1left); :};

ConstName ::= 
    (ConstName) IDENT:name {: RESULT=new ConstName(name); RESULT.setLine(nameleft); :};

ConstVar ::= 
    (NumConst) NUM_CONST:name {: RESULT=new NumConst(name); RESULT.setLine(nameleft); :}
    | (CharConst) CHAR_CONST:name {: RESULT=new CharConst(name); RESULT.setLine(nameleft); :}
    | (BoolConst) BOOL_CONST:name {: RESULT=new BoolConst(name); RESULT.setLine(nameleft); :};
    
List ::= 
    (ListVarDecl) List:L1 VarDecl:V2 {: RESULT=new ListVarDecl(L1, V2); RESULT.setLine(L1left); :}
    | (ListConstDecl) List:L1 ConstDecl:C2 {: RESULT=new ListConstDecl(L1, C2); RESULT.setLine(L1left); :}
    | (ListClassDecl) List:L1 ClassDecl:C2 {: RESULT=new ListClassDecl(L1, C2); RESULT.setLine(L1left); :}
    | (EmptyDeclList) {: RESULT=new EmptyDeclList(); :} /* epsilon */;

ClassDecl ::= 
    (ClassDecl) CLASS ClassName:C1 ExtendsOrNot:E2 StaticOrNot:S3 VarDeclOrNot:V4 MethodDeclListClass:M5 RBRACE {: RESULT=new ClassDecl(C1, E2, S3, V4, M5); RESULT.setLine(C1left); :};

ClassName ::= 
    (ClassName) IDENT:className {: RESULT=new ClassName(className); RESULT.setLine(classNameleft); :};

ExtendsOrNot ::= 
    (ExtendsYes) EXTENDS Type:T1 LBRACE {: RESULT=new ExtendsYes(T1); RESULT.setLine(T1left); :}
    | (ExtendsNot) /* epsilon */ LBRACE {: RESULT=new ExtendsNot(); :}
    | (ErrorExtends) error LBRACE:l
    {: parser.report_error("Izvrsen oporavak do { u liniji " + lleft, null);  :} {: RESULT=new ErrorExtends(); :};

StaticOrNot ::= 
    (StaticVarsYes) StaticVarDecl:S1 StaticVars:S2 StaticInitializerOrNot:S3 {: RESULT=new StaticVarsYes(S1, S2, S3); RESULT.setLine(S1left); :}
    // | (StaticVarsNot) STATIC LBRACE StatementList RBRACE StaticInitializerList
    | (StaticVarsNot) StaticInitializerList:S1 {: RESULT=new StaticVarsNot(S1); RESULT.setLine(S1left); :}
    | (StaticNot) {: RESULT=new StaticNot(); :} /* epsilon */;

StaticVars ::= 
    (StaticVarsLast) {: RESULT=new StaticVarsLast(); :} /* epsilon */
    | (StaticVarsMore) StaticVars:S1 StaticVarDecl:S2 {: RESULT=new StaticVarsMore(S1, S2); RESULT.setLine(S1left); :};

StaticVarDecl ::= 
    (StaticVarDecl) StaticWord:S1 VarDecl:V2 {: RESULT=new StaticVarDecl(S1, V2); RESULT.setLine(S1left); :};

StaticWord ::= 
    (StaticWord) STATIC {: RESULT=new StaticWord(); :};

StaticInitializerOrNot ::= 
    (StaticInitializerYes) StaticInitializerList:S1 {: RESULT=new StaticInitializerYes(S1); RESULT.setLine(S1left); :}
    | (StaticInitializerNo) {: RESULT=new StaticInitializerNo(); :} /* epsilon */;

StaticDeclList ::= 
    (StaticDeclListLast) {: RESULT=new StaticDeclListLast(); :} /* epsilon */
    | (StaticDeclListMore) StaticDeclList:S1 StaticWord:S2 VarDecl:V3 {: RESULT=new StaticDeclListMore(S1, S2, V3); RESULT.setLine(S1left); :};

MethodDeclListClass ::= 
    (MethodDeclListClassYes) LBRACE MethodDeclList:M1 RBRACE {: RESULT=new MethodDeclListClassYes(M1); RESULT.setLine(M1left); :}
    | (MethodDeclListClassNo) {: RESULT=new MethodDeclListClassNo(); :} /* epsilon */;

StaticInitializer ::= 
    (StaticInitializer) StaticWord:S1 StaticInitializerStart:S2 StatementList:S3 StaticInitializerEnd:S4 {: RESULT=new StaticInitializer(S1, S2, S3, S4); RESULT.setLine(S1left); :};

StaticInitializerStart ::=
    (StaticInitializerStart) LBRACE {: RESULT=new StaticInitializerStart(); :};

StaticInitializerEnd ::=
    (StaticInitializerEnd) RBRACE {: RESULT=new StaticInitializerEnd(); :};

StaticInitializerList ::= 
    (StaticInitializerListLast) StaticInitializer:S1 {: RESULT=new StaticInitializerListLast(S1); RESULT.setLine(S1left); :}
    | (StaticInitializerListMore) StaticInitializerList:S1 StaticInitializer:S2 {: RESULT=new StaticInitializerListMore(S1, S2); RESULT.setLine(S1left); :};

MethodDeclList ::= 
    (MethodDeclLast) {: RESULT=new MethodDeclLast(); :} /* epsilon */
    | (MethodDeclMore) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclMore(M1, M2); RESULT.setLine(M1left); :};

MethodDecl ::= 
    (MethodDecl) MethodDeclParams:M1 VarDeclOrNot:V2 MethodBegin:M3 StatementList:S4 RBRACE {: RESULT=new MethodDecl(M1, V2, M3, S4); RESULT.setLine(M1left); :};

MethodBegin ::=
    (MethodBegin) LBRACE {: RESULT=new MethodBegin(); :};

MethodDeclParams ::= 
    (MethodDeclParamsOk)  MethodType:mt MethodName:mn LPAREN FormParsOrNot:F1 RPAREN {: RESULT=new MethodDeclParamsOk(mt, mn, F1); RESULT.setLine(mtleft); :} 
    | (ErrorMethodDecl) error RPAREN:l
    {: parser.report_error("Izvrsen oporavak do ) u liniji " + lleft, null);  :} {: RESULT=new ErrorMethodDecl(); :};

MethodName ::= 
    (MethodName) IDENT:name {: RESULT=new MethodName(name); RESULT.setLine(nameleft); :};

MethodType ::= 
    (VoidMethodType) VOID {: RESULT=new VoidMethodType(); :}
    | (TypeMethodType) Type:typeName {: RESULT=new TypeMethodType(typeName); RESULT.setLine(typeNameleft); :};

FormParsOrNot ::= 
    (FormParsYes) FormPars:F1 {: RESULT=new FormParsYes(F1); RESULT.setLine(F1left); :} 
    | (FormParsNot) {: RESULT=new FormParsNot(); :} /* epsilon */;

FormPars ::= 
    (FormParsLast) FormPar:F1 {: RESULT=new FormParsLast(F1); RESULT.setLine(F1left); :}
    | (FormParsMore) FormPars:F1 COMMA FormPar:F2 {: RESULT=new FormParsMore(F1, F2); RESULT.setLine(F1left); :};

FormPar ::= 
    (FormParArray) FormParType:t FormParName:n LBRACKET RBRACKET {: RESULT=new FormParArray(t, n); RESULT.setLine(tleft); :}
    | (FormParNotArray) FormParType:t FormParName:n {: RESULT=new FormParNotArray(t, n); RESULT.setLine(tleft); :};

FormParName ::= 
    (FormParName) IDENT:name {: RESULT=new FormParName(name); RESULT.setLine(nameleft); :};

FormParType ::= 
    (FormParType) Type:name {: RESULT=new FormParType(name); RESULT.setLine(nameleft); :};

Statement ::= 
    (StatementDesignator) DesignatorStatement:D1 SEMICOLON {: RESULT=new StatementDesignator(D1); RESULT.setLine(D1left); :}
    | (ErrorAssignSemicolon) error SEMICOLON:l
    {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :} {: RESULT=new ErrorAssignSemicolon(); :}
    | (StatementIf) IfWord:I1 IfCond:I2 Statement:S3 {: RESULT=new StatementIf(I1, I2, S3); RESULT.setLine(I1left); :}
    | (StatementIfElse) IfWord:I1 IfCond:I2 Statement:S3 ElseBegin:E4 Statement:S5 {: RESULT=new StatementIfElse(I1, I2, S3, E4, S5); RESULT.setLine(I1left); :}
    | (StatementBreak) BREAK SEMICOLON {: RESULT=new StatementBreak(); :}
    | (StatementContinue) CONTINUE SEMICOLON {: RESULT=new StatementContinue(); :}
    | (StatementReturnExpr) RETURN Expr:E1 SEMICOLON {: RESULT=new StatementReturnExpr(E1); RESULT.setLine(E1left); :}
    | (StatementReturn) RETURN SEMICOLON {: RESULT=new StatementReturn(); :}
    | (StatementRead) READ LPAREN Designator:D1 RPAREN SEMICOLON {: RESULT=new StatementRead(D1); RESULT.setLine(D1left); :}
    | (StatementPrintNoNum) PRINT LPAREN Expr:E1 RPAREN SEMICOLON {: RESULT=new StatementPrintNoNum(E1); RESULT.setLine(E1left); :}
    | (StatementPrintNum) PRINT LPAREN Expr:E1 COMMA NUM_CONST:N2 RPAREN SEMICOLON {: RESULT=new StatementPrintNum(E1, N2); RESULT.setLine(E1left); :}
    | (Statements) LBRACE StatementList:S1 RBRACE {: RESULT=new Statements(S1); RESULT.setLine(S1left); :}
    | (StatementFor) ForWord:F1 LPAREN ForInit:F2 SEMICOLON ForCondFact:F3 SEMICOLON ForAfter:F4 RPAREN Statement:S5 {: RESULT=new StatementFor(F1, F2, F3, F4, S5); RESULT.setLine(F1left); :};

ElseBegin ::=
    (ElseBegin) ELSE {: RESULT=new ElseBegin(); :};

ForWord ::=
    (ForWord) FOR {: RESULT=new ForWord(); :};

IfWord ::=
    (IfWord) IF {: RESULT=new IfWord(); :};

IfCond ::= 
    (IfCondOk) LPAREN Condition:C1 RPAREN {: RESULT=new IfCondOk(C1); RESULT.setLine(C1left); :}
    | (ErrorIf) error RPAREN:l
    {: parser.report_error("Izvrsen oporavak do ) u liniji " + lleft, null);  :} {: RESULT=new ErrorIf(); :};

ForInit ::= 
    (ForInitEmpty) {: RESULT=new ForInitEmpty(); :} /* epsilon */
    | (ForInitNotEmpty) ForDesignatorStatementList:F1 {: RESULT=new ForInitNotEmpty(F1); RESULT.setLine(F1left); :};

ForAfter ::=
   (ForAfterEmpty) {: RESULT=new ForAfterEmpty(); :} /* epsilon */
   | (ForAfterNotEmpty) ForDesignatorStatementList:F1 {: RESULT=new ForAfterNotEmpty(F1); RESULT.setLine(F1left); :};

ForCondFact ::= 
    (ForCondFactEmpty) {: RESULT=new ForCondFactEmpty(); :} /* epsilon */
    | (ForCondFactNotEmpty) CondFact:C1 {: RESULT=new ForCondFactNotEmpty(C1); RESULT.setLine(C1left); :};

ForDesignatorStatementList ::= 
    (ForDesignatorStatementListLast) DesignatorStatement:D1 {: RESULT=new ForDesignatorStatementListLast(D1); RESULT.setLine(D1left); :}
    | (ForDesignatorStatementListMore) ForDesignatorStatementList:F1 COMMA DesignatorStatement:D2 {: RESULT=new ForDesignatorStatementListMore(F1, D2); RESULT.setLine(F1left); :};

StatementList ::= 
    (StatementListLast) {: RESULT=new StatementListLast(); :} /* epsilon */
    | (StatementListMore) StatementList:S1 Statement:S2 {: RESULT=new StatementListMore(S1, S2); RESULT.setLine(S1left); :};

DesignatorStatement ::=
    (DesignatorStmtAssign) Designator:D1 Assignop:A2 Expr:E3 {: RESULT=new DesignatorStmtAssign(D1, A2, E3); RESULT.setLine(D1left); :}
    | (DesignatorStmtAct) DesignatorCall:D1 LPAREN ActPars:A2 RPAREN {: RESULT=new DesignatorStmtAct(D1, A2); RESULT.setLine(D1left); :}
    | (DesignatorStmtInc) Designator:D1 INC {: RESULT=new DesignatorStmtInc(D1); RESULT.setLine(D1left); :}
    | (DesignatorStmtDec) Designator:D1 DEC {: RESULT=new DesignatorStmtDec(D1); RESULT.setLine(D1left); :}
    | (DesignatorEqStmt) DesignatorEqStmtStart:D1 DesignatorStatementList:D2 MUL Designator:D3 RBRACKET EQUAL DesignatorAssignedArray:D4 {: RESULT=new DesignatorEqStmt(D1, D2, D3, D4); RESULT.setLine(D1left); :};

DesignatorEqStmtStart ::=
    (DesignatorEqStmtStart) LBRACKET {: RESULT=new DesignatorEqStmtStart(); :};

DesignatorAssignedArray ::=
    (DesignatorAssignedArray) Designator:D1 {: RESULT=new DesignatorAssignedArray(D1); RESULT.setLine(D1left); :};

DesignatorStatementList ::=
    (DesignatorStatementListLast) {: RESULT=new DesignatorStatementListLast(); :} /* epsilon */
    | (DesignatorStatementListMore) DesignatorStatementList:D1 DesignatorStatementListMemberOrNot:D2 COMMA {: RESULT=new DesignatorStatementListMore(D1, D2); RESULT.setLine(D1left); :};

DesignatorStatementListMemberOrNot ::=
    (DesignatorStatementListMemberYes) Designator:D1 {: RESULT=new DesignatorStatementListMemberYes(D1); RESULT.setLine(D1left); :}
    | (DesignatorStatementListMemberNot) {: RESULT=new DesignatorStatementListMemberNot(); :} /* epsilon */;

VarDeclOrNot ::= 
    (VarDeclYes) VarDeclOrNot:V1 VarDecl:V2 {: RESULT=new VarDeclYes(V1, V2); RESULT.setLine(V1left); :}
    | (VarDeclNo) {: RESULT=new VarDeclNo(); :} /* epsilon */;

VarDecl ::= 
    (VarDeclOk) VarType:vt VarDeclList:V1 VarDeclSingle:vds SEMICOLON {: RESULT=new VarDeclOk(vt, V1, vds); RESULT.setLine(vtleft); :}
    | (ErrorVarDeclComma) ErrorSign:E1 {: RESULT=new ErrorVarDeclComma(E1); RESULT.setLine(E1left); :};

VarType ::= 
    (VarType) Type:varTypeName {: RESULT=new VarType(varTypeName); RESULT.setLine(varTypeNameleft); :};

ErrorSign ::= 
    (ErrorSignComma) error COMMA:l
    {: parser.report_error("Izvrsen oporavak do , u liniji " + lleft, null);  :} {: RESULT=new ErrorSignComma(); :}
    | (ErrorSignLbrace) error LBRACE:l
    {: parser.report_error("Izvrsen oporavak do { u liniji " + lleft, null);  :} {: RESULT=new ErrorSignLbrace(); :}
    | (ErrorSignSEMICOLON) error SEMICOLON:l
    {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :} {: RESULT=new ErrorSignSEMICOLON(); :};

VarDeclList ::= 
    (VarDeclListLast) {: RESULT=new VarDeclListLast(); :} /* epsilon */
    | (VarDeclListMore) VarDeclList:V1 VarDeclSingle:vds COMMA {: RESULT=new VarDeclListMore(V1, vds); RESULT.setLine(V1left); :};

VarDeclSingle ::= 
    (VarDeclSingleArray) IDENT:varName LBRACKET RBRACKET {: RESULT=new VarDeclSingleArray(varName); RESULT.setLine(varNameleft); :}
    | (VarDeclSingleNotArray) IDENT:varName {: RESULT=new VarDeclSingleNotArray(varName); RESULT.setLine(varNameleft); :};

Condition ::= 
    (ConditionLast) CondTerm:C1 {: RESULT=new ConditionLast(C1); RESULT.setLine(C1left); :}
    | (ConditionMore) Condition:C1 OR CondTerm:C2 {: RESULT=new ConditionMore(C1, C2); RESULT.setLine(C1left); :};

CondTerm ::= 
    (CondTermLast) CondFact:C1 {: RESULT=new CondTermLast(C1); RESULT.setLine(C1left); :}
    | (CondTermMore) CondTerm:C1 AND CondFact:C2 {: RESULT=new CondTermMore(C1, C2); RESULT.setLine(C1left); :};

CondFact ::= 
    (CondFactSingle) Expr:E1 {: RESULT=new CondFactSingle(E1); RESULT.setLine(E1left); :}
    | (CondFactMultiple) CondFactExpr1:C1 Relop:R2 CondFactExpr2:C3 {: RESULT=new CondFactMultiple(C1, R2, C3); RESULT.setLine(C1left); :};

CondFactExpr1 ::= 
    (CondFactExpr1) Expr:E1 {: RESULT=new CondFactExpr1(E1); RESULT.setLine(E1left); :};

CondFactExpr2 ::= 
    (CondFactExpr2) Expr:E1 {: RESULT=new CondFactExpr2(E1); RESULT.setLine(E1left); :};

ActPars ::= 
    (ActParsEmpty) {: RESULT=new ActParsEmpty(); :} /* epsilon */
    | (ActParsNotEmpty) ActParsList:A1 {: RESULT=new ActParsNotEmpty(A1); RESULT.setLine(A1left); :};

ActParsList ::= 
    (ActParsListLast) ActParSingle:a {: RESULT=new ActParsListLast(a); RESULT.setLine(aleft); :}
    | (ActParsListMore) ActParsList:A1 COMMA ActParSingle:a {: RESULT=new ActParsListMore(A1, a); RESULT.setLine(A1left); :};

ActParSingle ::= 
    (ActParSingle) Expr:e {: RESULT=new ActParSingle(e); RESULT.setLine(eleft); :};

Type ::= 
    (TypeNamespaceYes) TypeNamespace:tn COLON COLON TypeName:t {: RESULT=new TypeNamespaceYes(tn, t); RESULT.setLine(tnleft); :}
    | (TypeNamespaceNo) TypeName:t {: RESULT=new TypeNamespaceNo(t); RESULT.setLine(tleft); :};

TypeName ::= 
    (TypeName) IDENT:typeName {: RESULT=new TypeName(typeName); RESULT.setLine(typeNameleft); :};

TypeNamespace ::= 
    (TypeNamespace) IDENT:namespace {: RESULT=new TypeNamespace(namespace); RESULT.setLine(namespaceleft); :};

Expr ::= 
    (ExprLastMinus) MINUS Term:t {: RESULT=new ExprLastMinus(t); RESULT.setLine(tleft); :} 
    | (ExprLast) Term:t {: RESULT=new ExprLast(t); RESULT.setLine(tleft); :} 
    | (ExprMore) Expr:e Addop:A1 Term:t {: RESULT=new ExprMore(e, A1, t); RESULT.setLine(eleft); :};

Term ::= 
    (TermLast) Factor:f {: RESULT=new TermLast(f); RESULT.setLine(fleft); :} 
    | (TermMore) Term:t Mulop:M1 Factor:f {: RESULT=new TermMore(t, M1, f); RESULT.setLine(tleft); :};

Factor ::= 
    (FactorDesignatorAct) DesignatorCall:D1 LPAREN ActPars:A2 RPAREN {: RESULT=new FactorDesignatorAct(D1, A2); RESULT.setLine(D1left); :}
    | (FactorDesignatorNoAct) Designator:D1 {: RESULT=new FactorDesignatorNoAct(D1); RESULT.setLine(D1left); :}
    | (FactorNum) NUM_CONST:N1 {: RESULT=new FactorNum(N1); RESULT.setLine(N1left); :}
    | (FactorChar) CHAR_CONST:C1 {: RESULT=new FactorChar(C1); RESULT.setLine(C1left); :}
    | (FactorBool) BOOL_CONST:B1 {: RESULT=new FactorBool(B1); RESULT.setLine(B1left); :}
    | (FactorNewExpr) NEW Type:t LBRACKET Expr:e RBRACKET {: RESULT=new FactorNewExpr(t, e); RESULT.setLine(tleft); :}
    | (FactorNewAct) NEW ConstructorCall:C1 LPAREN ActPars:a RPAREN {: RESULT=new FactorNewAct(C1, a); RESULT.setLine(C1left); :} 
    | (FactorExpr) LPAREN Expr:e RPAREN {: RESULT=new FactorExpr(e); RESULT.setLine(eleft); :};

ConstructorCall ::=
    (ConstructorCall) Type:T1 {: RESULT=new ConstructorCall(T1); RESULT.setLine(T1left); :};

DesignatorCall ::=
    (DesignatorCall) Designator:D1 {: RESULT=new DesignatorCall(D1); RESULT.setLine(D1left); :};

Designator ::= 
    (DesignatorNamespace) DesignatorNamespaceName:d COLON COLON DesignatorName:dn {: RESULT=new DesignatorNamespace(d, dn); RESULT.setLine(dleft); :}
    | (DesignatorNoNamespace) DesignatorName:dn {: RESULT=new DesignatorNoNamespace(dn); RESULT.setLine(dnleft); :}
    | (DesignatorExprStmt) Designator:d LBRACKET Expr:e RBRACKET {: RESULT=new DesignatorExprStmt(d, e); RESULT.setLine(dleft); :}
    | (DesignatorIdentStmt) Designator:d DOT DesignatorIdent:D1 {: RESULT=new DesignatorIdentStmt(d, D1); RESULT.setLine(dleft); :};

DesignatorIdent ::= 
    (DesignatorIdent) IDENT:ident {: RESULT=new DesignatorIdent(ident); RESULT.setLine(identleft); :};

DesignatorNamespaceName ::= 
    (DesignatorNamespaceName) IDENT:NamespaceName {: RESULT=new DesignatorNamespaceName(NamespaceName); RESULT.setLine(NamespaceNameleft); :};

DesignatorName ::= 
    (DesignatorName) IDENT:DesignatorName {: RESULT=new DesignatorName(DesignatorName); RESULT.setLine(DesignatorNameleft); :};

Assignop ::= 
    (Assignop) EQUAL {: RESULT=new Assignop(); :};

Relop ::= 
    (RelopEq) EQ {: RESULT=new RelopEq(); :}
    | (RelopNeq) NEQ {: RESULT=new RelopNeq(); :}
    | (RelopGt) GT {: RESULT=new RelopGt(); :}
    | (RelopGte) GTE {: RESULT=new RelopGte(); :}
    | (RelopLt) LT {: RESULT=new RelopLt(); :}
    | (RelopLte) LTE {: RESULT=new RelopLte(); :};
    
Addop ::= 
    (AddopPlus) PLUS {: RESULT=new AddopPlus(); :}
    | (AddopMinus) MINUS {: RESULT=new AddopMinus(); :};

Mulop ::= 
    (MulopMul) MUL {: RESULT=new MulopMul(); :}
    | (MulopDiv) DIV {: RESULT=new MulopDiv(); :}
    | (MulopMod) MOD {: RESULT=new MulopMod(); :};